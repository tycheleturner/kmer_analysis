#!/bin/python3
# k-mer frequency matrix generation script
# for 06 and 07
# assumes user has KAnalyze files already generated

import os
import re
import glob
import argparse
import pandas as pd

def read_kc_file(path):
    counts = {}
    with open(path, "r") as f:
        for line in f:
            line = line.strip()
            if not line or line.startswith("#"):
                continue
            parts = line.split()
            if len(parts) != 2:
                continue
            kmer, cnt_str = parts
            counts[kmer] = int(cnt_str)
    return pd.Series(counts)

def parse_args():
    parser = argparse.ArgumentParser(description="Merge KAnalyze .kc files (k-mer strings) into a [genome file (e.g., species) × k-mer  frequency] matrix.")
    parser.add_argument(
        "--input_dir", "-i", required=True,
        help="Directory containing .kc files generated by the user from KAnalyze (required)"
    )
    parser.add_argument(
        "--pattern", "-p", default="*.4mer.kc",
        help="k-mer pattern to match .kc files (e.g. '*.4mer.kc' or '*.5mer.kc') (default is 4mer)"
    )
    parser.add_argument(
        "--output_csv", "-o", default="kmer_matrix.csv",
        help="Filename for the merged output CSV containing the [genome file (e.g., species) × k-mer  frequency] matrix"
    )
    return parser.parse_args()

def main():
    args = parse_args()

    search_pattern = os.path.join(args.input_dir, args.pattern)
    files = glob.glob(search_pattern)
    if not files:
        print(f"No files matched pattern {search_pattern}")
        return

    sample_fn = os.path.basename(files[0])

    m = re.search(r'(\d+)mer', sample_fn)
    if m:
        k = int(m.group(1))
    else:
        k = None
        
    print(f"Processing {len(files)} files; inferred k = {k}.")

    df_list = []
    for path in files:
        basename = os.path.basename(path)
        if k and f".{k}mer.kc" in basename:
            species = basename.split(f".{k}mer.kc")[0]
        else:
            species = basename.replace(".kc", "")

        s = read_kc_file(path)
        s.name = species
        df_list.append(s)

    df_counts = pd.concat(df_list, axis=1).fillna(0).astype(int)

    col_sums = df_counts.sum(axis=0)
    df_freqs = df_counts.divide(col_sums, axis=1)

    df_final = df_freqs.T.reset_index().rename(columns={"index": "species"})

    df_final.to_csv(args.output_csv, index=False, float_format="%.8f")
    print(f"Wrote merged k-mer frequency matrix to {args.output_csv}")
    print(f"File Dimensions = {df_final.shape} (number of species = {len(df_final)}, unique k-mer classes = {len(df_final.columns)-1})")
    
if __name__ == "__main__":
    main()
